generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime? // Add this field
  image          String?
  phone          String?
  address        String?
  bio            String?
  dob            DateTime?
  walletAddress  String?
  paymentMethods Json?     
  accountActivity Json?    
  accounts       Account[]
  sessions       Session[]
  password       String?
  bids           Bid[]
  payments       Payment[]  // Add this line to create the relation with Payment
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Bid {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  userId               String   @db.ObjectId
  title                String
  description          String
  itemCategory         String
  originLocation       String
  destinationLocation  String
  packageWeight        Float
  packageDimensions    Json     // Stores length, width, height
  fragile              Boolean  @default(false)
  maxBudget            Float
  requiredDeliveryDate DateTime
  liveBiddingStart     DateTime? // New field for scheduling live bidding
  insurance            Boolean  @default(false)
  status               String   @default("draft") // "draft", "pending_payment", "published", "active", "completed", "expired"
  imageUrls            String[]
  responses            Int      @default(0)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  carrierId            String?  @db.ObjectId
  paymentId            String?  @db.ObjectId

  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Payment {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  amount         Float
  currency       String
  transactionHash String?
  type           String
  status         String
  userId         String   @db.ObjectId
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id])
}

